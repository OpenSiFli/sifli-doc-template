name: Build and Upload Documentation

env:
  PROJ_NAME: doc-template

on:
  push:
    branches:
      - main
      - 'release/*'
    paths:
      - 'source/**'
    tags:
      - '*'
  workflow_dispatch:  # 允许手动触发

jobs:
  build-docs:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.determine-version.outputs.VERSION }}
    steps:
      - name: Determine version tag
        id: determine-version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ refs/heads/release/(.*) ]]; then
            VERSION=${BASH_REMATCH[1]}
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ refs/tags/(.*) ]]; then
            VERSION=${BASH_REMATCH[1]}
            echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # uncomment the line below if submodule is used
          # submodules: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
         
      - name: Install upload tools
        run: |
          sudo apt-get update
          pip install coscmd

      - name: Build zh_CN documentation
        working-directory: ./
        env:
          SIFLI_DOC_VERSION: ${{ steps.determine-version.outputs.VERSION }}
        run: sf-build-docs --lang=zh_CN
      
      - name: Build en documentation for ${{ matrix.variant }}
        working-directory: ./
        env:
          SIFLI_DOC_VERSION: ${{ steps.determine-version.outputs.VERSION }}
        run: sf-build-docs --lang=en

      - name: Configure COSCMD
        run: |
          coscmd config -a ${{ secrets.COS_DOCS_SECRET_ID }} -s ${{ secrets.COS_DOCS_SECRET_KEY }} -b ${{ secrets.COS_DOCS_BUCKET }} -r ${{ secrets.COS_DOCS_REGION }}

      - name: Upload documentation to COS
        run: |
          VERSION=${{ steps.determine-version.outputs.VERSION }}
          coscmd upload -rs --delete --yes ./build/zh_CN//html/ projects/${PROJ_NAME}/$VERSION/zh_CN/
          coscmd upload -rs --delete --yes ./build/en//html/ projects/${PROJ_NAME}/$VERSION/en/
          echo "Uploaded documentation to $VERSION/"

  finalize:
    needs: [build-docs]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install upload tools
        run: |
          pip install coscmd tccli

      - name: Configure COSCMD
        run: |
          coscmd config -a ${{ secrets.COS_DOCS_SECRET_ID }} -s ${{ secrets.COS_DOCS_SECRET_KEY }} -b ${{ secrets.COS_DOCS_BUCKET }} -r ${{ secrets.COS_DOCS_REGION }}

      - name: Upload to COS - version.json
        run: |
          VERSION=${{ needs.build-docs.outputs.version }}
          coscmd upload --yes ./version.json projects/${PROJ_NAME}/version.json
          echo "Uploaded version.json to projects/${PROJ_NAME}/version.json"
      
      - name: Purge CDN Cache
        run: |
          export TENCENTCLOUD_SECRET_ID=${{ secrets.COS_DOCS_SECRET_ID }}
          export TENCENTCLOUD_SECRET_KEY=${{ secrets.COS_DOCS_SECRET_KEY }}
          export TENCENTCLOUD_REGION=${{ secrets.COS_DOCS_REGION }}
          tccli cdn PurgePathCache --cli-unfold-argument --Paths "https://docs.sifli.com/projects/${PROJ_NAME}/" --FlushType flush